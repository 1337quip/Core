function isMovingHorizontally(entity) {
    return entity && entity != mc.thePlayer ? entity.lastTickPosX != entity.posX || entity.lastTickPosZ != entity.posZ : !!(mc.thePlayer.movementInput.moveForward || mc.thePlayer.movementInput.moveStrafe);
}

function isMovingVertically(entity) {
    return entity && entity != mc.thePlayer ? entity.lastTickPosY != entity.posY : mc.thePlayer.movementInput.jump;
}

function isMoving(entity) {
    return isMovingHorizontally(entity) || isMovingVertically(entity);
}

function isInputHorizontally() {
    return Keyboard.isKeyDown(mc.gameSettings.keyBindForward.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindLeft.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindBack.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindRight.getKeyCode());
}

function isInputVertically() {
    return Keyboard.isKeyDown(mc.gameSettings.keyBindJump.getKeyCode());
}

function getMoveYaw() {
    var moveYaw = mc.thePlayer.rotationYaw;
    if (mc.thePlayer.moveForward && !mc.thePlayer.moveStrafing) {
        moveYaw += mc.thePlayer.moveForward > 0 ? 0 : 180;
    } else if (mc.thePlayer.moveForward && mc.thePlayer.moveStrafing) {
        if (mc.thePlayer.moveForward > 0) moveYaw += mc.thePlayer.moveStrafing > 0 ? -45 : 45;
        else moveYaw += mc.thePlayer.moveStrafing > 0 ? 225 : 135;
    } else if (mc.thePlayer.moveStrafing && !mc.thePlayer.moveForward) moveYaw += mc.thePlayer.moveStrafing > 0 ? -90 : 90;
    return moveYaw;
}

function setSpeed(speed, strafe) {
    if (!isMoving()) return;
    if (mc.thePlayer.onGround || (strafe && !mc.thePlayer.onGround)) {
        var yaw = getMoveYaw();
        mc.thePlayer.motionX = -Math.sin(Math.PI / 180 * yaw) * speed;
        mc.thePlayer.motionZ = Math.cos(Math.PI / 180 * yaw) * speed;
    }
}

Keyboard = Java.type("org.lwjgl.input.Keyboard");